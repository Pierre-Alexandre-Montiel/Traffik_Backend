generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String?     @unique
  firstName    String?
  lastName     String?
  userStatusId String?     @unique
  userTypeId   String?     @unique
  phone        String?
  instagram    String?
  tiktok       String?
  positionId   String?     @unique
  password     String?
  updatedAt    DateTime?   @updatedAt
  createdAt    DateTime?   @default(now())
  membershipId String?     @unique
  address      Address[]
  client       Client[]
  //company      Company?
  Contract     Contract?
  Whishlist    Item[]
  Project      Project[]
  showroom     Showroom?
  stylist      Stylist?
  admin        Admin?
  membership   Membership? @relation(fields: [membershipId], references: [id])
  position     Position?   @relation(fields: [positionId], references: [id])
  userStatus   UserStatus? @relation(fields: [userStatusId], references: [id])
  userType     UserType?   @relation(fields: [userTypeId], references: [id])
  wishlist     Wishlist[]
}

model Showroom {
  id     String  @id @default(uuid())
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])
}

model Stylist {
  id     String  @id @default(uuid())
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])
}

model Admin {
  id     String  @id @default(uuid())
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])
}

model UserStatus {
  id         String          @id @default(uuid())
  userStatus userStatusList?
  User       User?
}

model UserType {
  id       String        @id @default(uuid())
  userType userTypeList?
  user     User?
}

model Membership {
  id             String         @id @default(uuid())
  membershipType MembershipType
  companyId      String?
  //company        Company?       @relation(fields: [companyId], references: [id])
  member         User?
}

model Contract {
  id        String    @id @default(uuid())
  legalName String?   @unique
  startDate DateTime
  endDate   DateTime
  companyId String?
  memberId  String?   @unique
  addressId String?   @unique
  createdAt DateTime? @default(now())
  address   Address?  @relation(fields: [addressId], references: [id])
  //company   Company?  @relation(fields: [companyId], references: [id])
  member    User?     @relation(fields: [memberId], references: [id])
}

model Position {
  id        String        @id @default(uuid())
  position  PositionType?
  companyId String?
  //company   Company?      @relation(fields: [companyId], references: [id])
  User      User?
}

model Client {
  id         String    @id @default(uuid())
  talentId   String?
  providerId String?
  createdAt  DateTime? @default(now())
  talent     User?     @relation(fields: [talentId], references: [id], onDelete: Cascade)
  // provider   Company?  @relation("provider", fields: [providerId], references: [id], map: "provider_providerId_fkey")
}

model Address {
  id        String    @id @default(uuid())
  address1  String?
  address2  String?
  city      String?
  state     String?
  zip       String?
  country   String?
  userId    String?
  companyId String?
  createdAt DateTime? @default(now())
  // company   Company?  @relation(fields: [companyId], references: [id])
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contract  Contract?
}

model Project {
  id        String  @id @default(uuid())
  event     String
  projectId String?
  userId    String?
  talentId   String?
  items     Item?   @relation(fields: [projectId], references: [barcode])
  User      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Talent    Talents?   @relation(fields: [talentId], references: [id])
}

model Talents {
  id        String   @id @default(uuid())
  firtsName String
  lastName  String
  email     String
  tiktok    String
  project  Project[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id               String        @id @default(uuid())
  barcode          String?       @unique
  createdAt        DateTime      @default(now())
  brandId          String?
  showroomId       String?
  UserId           String?
  collectionId     String?       @unique
  season           String?
  style            String?
  typeId           String?
  color            String?
  location         String?
  availabilityId   Int?          @unique
  condition        Int?
  comment          String?
  replacementValue String?
  retailValue      Int?
  whishlist        User?         @relation(fields: [UserId], references: [id], onDelete: Cascade)
  availability     Availability? @relation(fields: [availabilityId], references: [id])
  //brand            Brand?      @relation("branding", fields: [brandId], references: [id])
  collection       Collection?   @relation(fields: [collectionId], references: [id])
  //showroom         Company?      @relation("ItemShowroom", fields: [showroomId], references: [id])
  picture          Pictures[]
  project          Project[]
  pull             Pull[]
  sizes            String?
  stocks           Stock[]
  wishlist         Wishlist[]
  Brand            Brand[]
}

model Brand {
  id      String @id @default(uuid())
  name    String
  brandId String?
  items   Item?  @relation(fields: [brandId], references: [barcode])
}

model Pictures {
  id        String @id @default(uuid())
  filename  String
  articleId String
  item      Item   @relation(fields: [articleId], references: [barcode])
}

//model Sizes {
// id        String @id @default(uuid())
//  nom       String
//  articleId String
//  item      Item   @relation(fields: [articleId], references: [barcode])
//}

model Stock {
  id        String @id @default(uuid())
  quantite  Int
  articleId String
  item      Item   @relation(fields: [articleId], references: [barcode])
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Item     @relation(fields: [productId], references: [id])
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model Stylistes {
  id        String   @id @default(uuid())
  firtsName String
  lastName  String
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id         String          @id @default(uuid())
  collection collectionList?
  Item       Item?
}

model Availability {
  id           Int              @id @default(autoincrement())
  availability availabilityList
  Item         Item?
}

model Pull {
  id         Int          @id @default(autoincrement())
  barcodeId  String?
  createdAt  DateTime?    @default(now())
  idItem     Item?        @relation(fields: [barcodeId], references: [id])
  PullUpdate PullUpdate[]
}

model PullUpdate {
  id        String    @id @default(uuid())
  pullId    Int?
  ready     Int?
  out       Int?
  returned  Int?
  worn      Int?
  assets    Bytes?
  createdAt DateTime? @default(now())
  pull      Pull?     @relation(fields: [pullId], references: [id])
}

model Lambda {
  id        String    @id @default(uuid())
  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())
}

enum userStatusList {
  active
  inactive
}

enum userTypeList {
  brand
  showroom
  stylist
  talent
  traffik
}

enum MembershipType {
  mem1
  mem2
  mem3
}

enum PositionType {
  influencer
  model
  pressOffice
  pressOfficeDirector
  stylist
  stylistAssistant
}

enum ProjectStatus {
  Open
  Close
}

enum collectionList {
  Womenswear
  Menswear
  Unisex
}

enum typeList {
  Accessories
  Bags
  Clothing
  Footwear
}

enum availabilityList {
  Available
  Loaned
  Maintenance
  Gifted
  Lost
}
